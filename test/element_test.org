#+LATEX_HEADER: \usepackage {ctex}
** 简答题

   一共1000个苹果，有任意多个箱子用来装苹果，要求一个或多个箱子中的苹果数量之和可以得到1到1000中的任意数目的苹果。

   请问最少需要多少个箱子才能满足上述条件？
** 下面C语言的输出是什么, 并给出解释
   
   #+begin_src c
     char p[20]; 
     char *s = "string"; 
     int length = strlen(s); 
     int i; 
     for (i = 0; i < length; i++) 
	  p[i] = s[length - i]; 
     printf("%s",p);
   #+end_src

   - a) gnirts
   - b) gnirt
   - c) string
   - d) 没有输出

** 给出下面C语言程序的输出, 并解释为什么
   #+begin_src c
     #include <stdio.h>

     int main() {
	 if (sizeof(int) > -1)
	     printf("True");
	 else
	     printf("False");
     }
   #+end_src
** 下面C语言会输出什么, 并给出解释
   #+begin_src c
    #include <stdio.h>
    main()
    {
        int n = 0, m = 0;
        if (n > 0)
            if (m > 0)
                printf("True");
        else 
            printf("False");
    }
   #+end_src

   - a) True
   - b) False
   - c) 没有输出
   - d) 运行错误

** 二叉树如下,使用先序遍历的结果是:
   [[file:./img/1234.png]]

** 二叉搜索树如下, 请问以何种顺序输入无法构造这样的二叉树

   [[file:./img/111222.png]]

   [[file:./img/111223.png]]

** 使用直线划分空间

   如下图所示:
   
   [[file:img/line.png]]
   
   - 0根直线可以划分出1个空间
   - 1根直线可以划分出2个空间
   - 2根直线可以划分出4个空间

   *问题*:

   1) 写出公式L(n); n表示折线数量, L(n)表示通过n根折线可以划分出的最多的空间数量
   2) 使用C语言实现计算L(n)的函数
      #+begin_src c
	int calc_line_spaces(int n); // n >= 0
      #+end_src     
     
** 使用折线划分空间

   如下图所示:
   - 0根折线可以划分出1个空间
   - 1根折线线可以划分出2个空间
   - 2根折线最多可以划分出7个空间

   [[file:./img/zline.png]]
   

   *问题*:

   1) 写出公式Z(n); n表示折线数量, Z(n)表示通过n根折线可以划分出的最多的空间数量
   2) 使用C语言实现计算Z(n)的函数
      #+begin_src c
	int calc_zig_spaces(int n); // n >= 0
      #+end_src

** 打印三角形
   [[file:./img/triangle.png]]

   观察上图三角形的规律,实现函数根据输入n打印n行如图所示三角形.
   #+begin_src c
     void draw(unsigned int n); // n > 0
   #+end_src
   
** 实现atof函数
   - 函数定义
     #+begin_src c
       double my_atof(char *nptr);
     #+end_src
   - 函数描述

     ~my_atof()~ 会扫描参数nptr字符串，跳过前面的空格字符，直到遇上数字或 ~.~ 符号才开始做转换，而遇到非数字或字符串结束时('\0')才结束转换，并将结果返回。

     以下都是合法输入:
     #+begin_example
       0.123
       .123
       16.4
       16.
       0.0
       0.
     #+end_example
     
     #+begin_example
     注意: 不考虑 +- 符号, 不考虑输入非法的情况
     #+end_example

** 使用栈的数据结构实现队列的功能
   1) 你有完整的栈的数据结构可以使用:
      
      [[https://github.com/linc5403/ds-c/blob/master/code/02-stack/stack.c][stack.c]]

      [[https://github.com/linc5403/ds-c/blob/master/code/02-stack/stack.h][stack.h]]

   2) 只能使用上面文件中提供的方法来实现队列的enqueue和dequeue方法, 函数声明类似如下:

      #+begin_src c
	enqueue(Queue* queue, int data); // 函数定义请自己考虑
	int dequeue(Queue* queue); // 函数定义请自己考虑
      #+end_src
      
      - ~Queue~ 结构体的定义在stack.h文件中
      - 上面的两个函数里面只能调用已有的函数,不能使用其他方法对入参queue进行操作
      - 测试用例类似如下:
	#+begin_src c
	  int main(void) {
	      Queue* queue = init_stack();
	      int a[5] = {1, 2, 3, 4, 5};
	      for( int i = 0; i < 5; i++) {
		  enqueue(queue, a[i]);  // 可按照自己的函数定义进行修改
	      }

	      for (int i = 0; i < 5; i++) {
		  int out = dequeue(queue); // 可按照自己的函数定义进行修改
		  printf("%3d", out);
	      }
	      printf("\n");
	      return 0;
	  }
        #+end_src
	
	程序应当输出类似结果: 1  2  3  4  5
