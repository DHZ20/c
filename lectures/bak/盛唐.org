* 3/26
** 作业
*** 复习8
    1. 没外网
    2. 没开机
    3. 公司防火墙
*** 复习9
    #+begin_example
      服务器 硬件 软件 linux
      服务器进程 提供服务的程序
      客户端进程 需要访问外部的资源
    #+end_example

*** 练习9
    #+begin_example
      端口号+IP地址 -> socket -> TCP/UDP
      http -> 80/8080
      dns  -> 53
      https -> 443(ssl)
    #+end_example

*** URL
    统一资源定位符
*** TCP连接
    #+begin_example
      pc1 (ip1 + port1)    baidu(ip_baidu + 80)
    #+end_example

** C第一课
   #+begin_example
     事物      事务

     1-100的偶数和
     2+4+6+8+...+100
     n
     sum
     n 2 -> 100
     sum <- n

     n = 1
     当 n <= 100 的时候
	 如果n是偶数
	     把n的值加到sum里面去
	 否则n是奇数
	     啥都不干
	 n = n + 1

     此时sum应该就是要的结果
     输出sum

     顺序 分支 循环
    
   #+end_example


**** .gitignore
     #+begin_example
       * # 不管理任何文件
       !*/  # 管理文件夹
       !*.c # 管理.c文件
       !*.h # 管理.h文件
       !.gitignore # 管理.gitignore本身
       !*.md # 管理markdown文件
     #+end_example
* 3/27
** 作业Review
   #+begin_example
       12 的阶乘是 0x1c8cfc00    479001600    479001600
       13 的阶乘是 0x7328cc00   1932053504   1932053504

     0x1c8cfc00 * 13 = 0x1 7328cc00
     超过了4个字节，溢出首位的0，剩下0x7328cc00
     此时是16进制表示，其10进制表示各位有4也是正常的，例如：
     0x10 = 16
     0x40 = 64
   #+end_example
   

** 使用C进行编程
** 分支结构
* 4/13

                                     h       t
| 下标 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
| 值   |   |   |   |   |   |   |   |   |   |   |

** sort

   #+begin_src c
     struct notebook {
       unsigned double price; //按价格排序
       char* vendor; // 厂家名称
       struct spec {
	 // 内存大小
       };
       ....
     } Notebook;

     Notebook notebook_all [10000];
     Notebook* pAll;
   #+end_src

   #+begin_src plantuml :file ./img/select.svg
   @startuml
   start
   stop
   @enduml
   #+end_src

   #+RESULTS:
   [[file:./img/select.svg]]

	
    从n个元素中选择最小的那个，放到0号位置
    从n-1个元素中选择最小的那个，放到1号位置
    从n-2个元素中选择最小的那个，放到2号位置	
    从n-3个元素中选择最小的那个，放到3号位置
	。。。
	从2个元素中选择最小的那个，放到n-2号位置
** 循环结构
*** 素数
    除了1 和它本身，不能被其他数整除

    给你一个数，判断是否素数

    num

    是/否？
    
    从2开始往上加+（num-1)，每个数都被num除一下，判断余数是否为0，如果余数是0，则表示这个数不是素数。
    
    #+begin_src c
      int num;
      int flag = 1; //flag 表示素数
      for (int i = 2; i < num - 1; i++) {
	  if ((num % i) == 0) {
	      // 不是素数
	      flag = 0;
	      break;
	  }
      }

      if (flag == 0) {
	  //不是素数
      } else {
         // 是素数
      }
    #+end_src

* 3/31
  
** Review

*** 三个数中的最大数
    
    a,b,c
    
    if a > b:
       比较a和c的大小，选其中大的：
       if (a > c):
           return a;
       else:
           return c;
    else
       比较b和c的大小，选其中大的
       if (b > c):
           return b;
       else 
           return c;

* 4/1
** Review

   *统计随机数的分布*

   1. 构造一个数组，存放不同区间的数字个数的统计
      
      #+begin_example
	a[0] 0 ~ 9
	a[1] 10 ~ 19
	a[2] 20 ~ 29
	...
	a[9] 90 ~ 99
	a[10] 100
      #+end_example
      
   2. 计算a中最大的数目，用它来作为标准进行*的打印
      
      #+begin_src c
	// 假设a[max] = 16，最多的那一组有16个数字，所以有16个*

	for (int i = a[max]; i > 0; i--) {
	    for (int j = 0; j < 11; j++) {
		if (a[j] >= i) {
		    printf("*");
		} else {
		    printf(" ");
		}
	    }
	 }

      #+end_src
	
      
   #+begin_example
       8 11 12 11  5 16  7 10  9 11  0
		      ,*
		      ,*
		      ,*
		      ,*     
	    ,*         *
	 ,*  *  *                  *   
   #+end_example


** pointer

   #+begin_example
   int x; 
     x的地址是0x7ffeefbff51c
     x的值是1
   x = 100;
     x的值变为100 0x00000064
   int *p = &x;
     p的值是0x7ffeefbff51c，就是x的地址
     p的地址是？？0x7ffeefbff510
     p指向x变量
   (*p) = (*p) + 1;
     p指向的东西加1
   #+end_example
   
   #+begin_example
   a 0x7ffeefbff51c 1
   b 0x7ffeefbff518 2
   x 0x7ffeefbff4fc 1
   y 0x7ffeefbff4f8 2
   #+end_example

* 4/3
  练习

  n = 5, k = 3

  a[n]
  
  a[1] - a[2], a[2] - a[3], ... a[n-1] - a[n]

  k = 1, n = 2

  只要a[n]不同就成立, 两个数不同即可

  k = 1, n = 3
  
  a[0] - a[1] = a[1] - a[2] 三个数的两两差相同
  n -> n-1个差 k 表示相同的差，不同的差？？
  *k = 1 表示是等差数列*

  k = 1, n = 4
  
  a[0] - a[1] = a[1] - a[2] = a[2] - a[3]

  k = 2, n = 3
  
  a[0] - a[1] != a[1] - a[2]
  
      
  

  k = 2, n = 4

  a[0] = 0, a[1] = 1, a[2] = 2, a[3] = 4

  k != 1, 差的总数是n-1, 其中有k个不同的差，试图先构造k个不同的差的数列，剩下的则是相同的差的数列
  a[0] = 1;
  for (i = 0; i < k; i++) {
      a[i+1] = a[i] + i;
  

1, 2, 3, 4, 5

* 4/7

问题：这一章中总体来说有的部分理解难度不太大，但是在读取文本数据的那一块，较为疑惑的是，对于一个文本数据， 例如下面所示，是如何区分间隔身高和体重的数据，然后进行赋值的？

Aiba16059.3
Kurata16251.6
Masaki18216.5
Tanaka17060.7
Tsuji17583.9
Washio17572,5

#+begin_src c
typedef
#+end_src

O(1) < O(n) < O(nlogn) < O(n^2) < O(n^3) < O(e^n)

